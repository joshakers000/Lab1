AWSTemplateFormatVersion: '2010-09-09'
Description:  This template deploys a VPC, with a pair of public and private subnets spread
  across two Availability Zones. It deploys an internet gateway, with a default
  route on the public subnets. It deploys a pair of NAT gateways (one in each AZ),
  and default routes for them in the private subnets.  It also deploys two Nacls,
  one for the public and one for the private subnet with rules for SSHing from any IP
  in the public and the ability to ping between devices in the subnets.  Two EC2 t2.micro
  instances are also included and associated with each subnet respectively.
  It is known that allowing ssh from all IPs is bad.  This is simply done for demonstration
  purposes.
Transform: 'AWS::Serverless-2016-10-31'
Parameters:
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String

  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 172.14.0.0/16

  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 172.14.1.0/24

  PrivateSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 172.14.2.0/24

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: false
      EnableDnsHostnames: false
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: "us-east-1a"
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ1)


  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: "us-east-1b"
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ1)

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1



  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Routes (AZ1)


  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1
      
     

  NoIngressSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "no-ingress-sg"
      GroupDescription: "Security group with no ingress rule"
      VpcId: !Ref VPC
      
      
  MyPubNACL:
    Type: AWS::EC2::NetworkAcl
    DependsOn: PublicSubnet1
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: NaclPub
  PubInboundRule1:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: MyPubNACL
    Properties:
      Egress: false
      NetworkAclId:
        Ref: MyPubNACL
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 22
        To: 22
        
  PubInboundRule2:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: MyPubNACL
    Properties:
      Egress: false
      NetworkAclId:
        Ref: MyPubNACL
      RuleNumber: 105
      Protocol: 6
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 80
        To: 80
        
        
  PubInboundRule3:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: MyPubNACL
    Properties:
      Egress: false
      NetworkAclId:
        Ref: MyPubNACL
      RuleNumber: 110
      Protocol: 1
      RuleAction: allow
      CidrBlock: 172.14.2.0/24
      Icmp:
        Type: -1
        Code: -1
      PortRange:
        From: 7
        To: 7
        
        
  PubOutboundRule1:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: MyPubNACL
    Properties:
      Egress: true
      NetworkAclId:
        Ref: MyPubNACL
      RuleNumber: 100
      Protocol: -1
      Egress: true
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
       
       
  PubOutboundRule2:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: MyPubNACL
    Properties:
      Egress: true
      NetworkAclId:
        Ref: MyPubNACL
      RuleNumber: 110
      Protocol: 1
      RuleAction: allow
      CidrBlock: 172.14.2.0/24
      Icmp:
        Type: -1
        Code: -1
      PortRange:
        From: 7
        To: 7
         
  MyPrivNACL:
    Type: AWS::EC2::NetworkAcl
    DependsOn: PrivateSubnet1
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: NaclPriv

  PrivInboundRule1:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: MyPrivNACL
    Properties:
      Egress: false
      NetworkAclId:
        Ref: MyPrivNACL
      RuleNumber: 110
      Protocol: 1
      RuleAction: allow
      CidrBlock: 172.14.1.0/24
      Icmp:
        Type: -1
        Code: -1
      PortRange:
        From: 7
        To: 7

  PrivOutboundRule1:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: MyPrivNACL
    Properties:
      Egress: true
      NetworkAclId:
        Ref: MyPrivNACL
      RuleNumber: 110
      Protocol: 1
      RuleAction: allow
      CidrBlock: 172.14.1.0/24
      Icmp:
        Type: -1
        Code: -1
      PortRange:
        From: 7
        To: 7
        
        
  EC2PubSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to client host
      VpcId:
        Ref: VPC
        
        
  SecurityGroupIngress1:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref EC2PubSecGroup
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      CidrIp: 0.0.0.0/0
      
  SecurityGroupIngress2:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref EC2PubSecGroup
      IpProtocol: icmp
      FromPort: -1
      ToPort: -1
      CidrIp: 172.14.0.0/16 
      
  SecurityGroupEgress1:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref EC2PubSecGroup
      IpProtocol: -1
      FromPort: -1
      ToPort: -1
      CidrIp: 0.0.0.0/0
  SecurityGroupEgress2:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref EC2PubSecGroup
      IpProtocol: -1
      FromPort: -1
      ToPort: -1
      CidrIp: 172.14.0.0/16
        
  EC2PrivSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to client host
      VpcId:
        Ref: VPC
        
  SecurityGroupIngress3:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref EC2PrivSecGroup
      IpProtocol: icmp
      FromPort: -1
      ToPort: -1
      CidrIp: 172.14.0.0/16
  SecurityGroupEgress3:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref EC2PrivSecGroup
      IpProtocol: -1
      FromPort: -1
      ToPort: -1
      CidrIp: 172.14.0.0/16
         
  EC2PubInstance: 
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: "ami-0915bcb5fa77e4892"
      KeyName: "vpc"
      InstanceType: "t2.micro"
      NetworkInterfaces:
        - AssociatePublicIpAddress: "false"
          DeviceIndex: "0"
          SubnetId:
            Ref: PublicSubnet1
            
  EC2PrivInstance: 
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: "ami-0915bcb5fa77e4892"
      KeyName: "vpc"
      InstanceType: "t2.micro"
      NetworkInterfaces:
        - AssociatePublicIpAddress: "false"
          DeviceIndex: "0"
          SubnetId:
            Ref: PrivateSubnet1



  EC2Pub1EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc
      InstanceId: !Ref EC2PubInstance
      
  myPrivSubnetNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnet1
      NetworkAclId:
        Ref: MyPrivNACL
         
  myPubSubnetNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet1
      NetworkAclId:
        Ref: MyPubNACL